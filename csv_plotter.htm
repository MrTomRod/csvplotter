<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <title>csv plotter</title>

    <style type="text/css">
    .invalid  {
        box-shadow: 0 0 3px 1px #900 !important;   /* red */
    }

    [contenteditable]:empty:before {
        content: attr(placeholder);
        color: #ccc;
        cursor: text;
    }

    input, .dropcell {
        font-family: Tahoma;
        font-size: 13px;
        padding: 2px;
    }

    .dropcell, div.func {
        min-height: 20px;
        min-width: 40px;
        display: table-cell;
        flex-grow: 1;
        padding: 4px 1px;
        /*border-right: #ccc 1px solid; */
        overflow: hidden;
        box-shadow: #ddd -1em 0px 1em -1em inset;   /* greying out rightwards */
        text-indent: 15px;
    }

    .dragging.dropcell, .dragging .dropcell, .dropcell:focus-within,  div.func:focus-within  {
        box-shadow: 0 0 3px 1px #090;   /* green */
    }

    .kbox[knum] {
        border: 1px solid #0002;       /* grey ~ #ccc */
        background-color: #e8f9ffaa;   /* a light blue */
        text-indent: 0px;
        display: inline-block;
        padding: 0px 4px;
    }

    .kbox::before {
        content: attr(knum);
        vertical-align: super;
        font-size: smaller;
        color: grey;
    }

    .kbox > span {
        pointer-events: none;       /* pass all events to kbox */
    }

    #kpool > .kbox {
        cursor: pointer;            /* sent by click */
        margin: 3px;
    }

    .dropcell > .kbox::before {
        cursor: grab;               /* draggable */
    }

    .kbox:active {
        opacity: 0.4;
    }

    .kbox:not([knum]) {
        text-decoration: underline wavy red;
    }

    .dropcell .kbox.dragover {
         border: 1px dashed #090;       /* grey ~ #ccc */
    }

    li {
        display: block;
        padding: 0 2px;
        text-indent: initial;   /* do not inherit fom div */
    }

    li > .kbox {
        border: none;
        background-color: transparent;
        pointer-events: none;
    }

    li.hover {
        background: lightblue;
    }

    li:not(.show) {
        display: none;
    }

    #kpool > .kbox > span, li > .kbox > span {
        font-size: 0;   /* hide the dollar */
    }

    span.dropcell.color {
        width: 25px;
        flex-grow: 0;
    }

    span.dropcell.opacity {
        width: 15px;
        flex-grow: 0;
    }

    .dropcell.color:not(:hover):not(:focus) {
        /* slowly hide hex string */
        transition: color 1s;
        color: transparent;
    }

    .trace_t {
        border: 1px solid #ccc;
        display: flex;
        padding: 0 0 0 4px;
    }

    .trace_t:focus, .trace_t:focus-within {
        border-color: #6399cb;
    }

    .trace_t > label {
        font-weight: bold;
        font-style:  italic;
        color: #ccc;
    }

    .trace_t:focus > label, .trace_t:focus-within > label {
        color: #6399cb;
    }

    label > i, label > label {
        position: absolute;
    }

    label > i {
        padding: 2px 4px;
    }

    label > label {
        padding: 0px 4px;
    }

    #colornames {
        display: flex;
        flex-wrap: nowrap;
    }

    #colornames > div {
        min-width: 20px;
        height: 20px;
        margin: 2px;
    }

    #colornames > div:active {
        opacity : 0.4;
    }

    /* fullscreen mode + uncomment height in plot_data*/
    #plotly-div {
        flex-grow: 20;
    }

    body {
        display: flex;
        flex-direction: column;
    }

    .vis {
        transition: opacity 0.2s;
        border: none;
        border-radius: 4px;
        padding: 4px 6px;
    }
    .vis:not(:hover) {
        opacity: 0.4;
    }

    :fullscreen .fa-expand {display: None}
    html:not(:fullscreen) .fa-compress {display: None}

    .dropcell > .active {
        outline: 5px auto Highlight;
        outline: 5px auto -webkit-focus-ring-color;
        outline: 1px solid #000;
        outline: 1px dashed #0008;  /* transparency to make cursor visible at border */
    }

    #suggest_list {
        display: none;
    }

    </style>
</head>

<body style="font-family: verdana; font-size: 70%; margin: 0">

<div style="position: fixed; left: 20px; top: 10px; z-index: 10000">
   <button id="fullscreen" class="vis" onclick="if (document.fullscreenElement) {(document.exitFullscreen || document.webkitExitFullscreen).call(document)}
   else {var elem = document.documentElement; (elem.requestFullscreen || elem.webkitRequestFullscreen).call(elem)}"><i class="fas fa-expand"></i><i class="fas fa-compress"></i></button>
   <button id="expand" class="vis" onclick="[document.getElementsByTagName('body')[0].style.height, graph.style.height] = this.firstChild.classList.toggle('fas') ?  ['','100vh'] : ['100vh', ''];"><i class="far fa-keyboard"></i></button>
</div>

<div id="plotly-div"></div>
<div style="display: flex; align-items: start;"><i class="fa fa-info" style="padding: 0px 5px;"></i>
    <div id="info" style="flex-grow: 1"><span style="color:grey"></span></div>
    <button class="mobile" onmousedown="event.preventDefault()" onclick="sel.modify('move', 'backward', 'character')" style="width:100px"><i class="fas fa-arrow-left"></i></button>
    <button class="mobile" onmousedown="event.preventDefault()" onclick="sel.modify('move', 'forward', 'character')" style="width:100px"><i class="fas fa-arrow-right"></i></button>
    <button id="share" style="border-width: 1px; border-radius: 2px; border-color: #bbb; padding: 2px 8px; font-size: larger"><i class="fa fa-share-alt"></i></button>
    <a id="github" style="text-decoration: none; color: black; padding: 2px 8px; font-size: large" href="https://github.com/mzechmeister/csvplotter"><i class="fab fa-github"></i></a>
</div>


<div>
   <div id="colornames" style="height:20px; float:right"></div>
</div>


<div class="traces" style="background: white; margin: 5px 0;">
   <div class="trace_t" tnum=1 tabIndex=0>
      <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon">
      <label><i class="far fa-file"></i></label><span id="url" class="dropcell"><label for="csvFileInput" style="display: inline-block; text-align: left; border: 1px solid #ccc"></label>
      <input id="csvFileInput" type="file" style="display:none" onchange="this.previousElementSibling.textContent = this.previousElementSibling.title = this.files[0].name; dsv(this.files[0], plot_data)" placeholder="Choose file"></span>
      <label style="display: none">using</label><span id="using" placeholder="1:2" onchange="using_columns()" style="width: 200px; display: none">1:2</span>
      <label><label>x</label></label><span id="cx" class="dropcell" placeholder="x" onchange="select_columns()"></span>
      <label><label>y</label></label><span id="cy" class="dropcell" placeholder="y" onchange="select_columns()"></span>
      <label><i class="fa fa-arrows-alt-h"></i></label><span id="ce_x" class="dropcell" placeholder="err_x" onchange="select_columns()"></span>
      <label><i class="fa fa-arrows-alt-v"></i></label><span id="ce_y" class="dropcell" placeholder="err_y" onchange="select_columns()"></span>
      <label><i class="fa fa-tag"></i></label><span id="ct" class="dropcell" placeholder="label" onchange="select_columns()"></span>
      <label><i class="fa fa-bullseye"></i></label><span id="cs" class="dropcell" placeholder="size" onchange="select_columns()"></span>
      <label><i class="fas fa-shapes"></i></label><span id="pt" class="dropcell" placeholder="pt" onchange="select_columns()"></span>
      <label><i class="fa fa-tint"></i></label><span id="cc" class="dropcell color" placeholder="color" onchange="select_columns()"></span>
      <label><i class="fa fa-adjust"></i></label><span id="co" class="dropcell opacity" placeholder="opac" onchange="select_columns()">0.5</span>
   </div>
   <div class="trace_t" tnum=2>
      <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
      <label><i class="fa fa-calculator"></i></label><span id="funcf" class="dropcell func" onchange="empty_func(); draw_func()" placeholder="[::] f(x)  or  x(t), y(t)"></span>
      <label><i class="fa fa-tint"></i></label><span type="search" id="funcc" class="dropcell color" placeholder="color" onchange="select_columns()"></span>
      <label><i class="fa fa-adjust"></i></label><span id="funco" class="dropcell opacity" onchange="select_columns()">0.5</span>
   </div>
</div>

<div id="kpool"></div>

<span id="suggest_div" contentEditable=False style="position: absolute; padding: 10px 0;"><ul id="suggest_list" style="padding: 0; width: 100%; background: #fffc; border: 1px solid #ccc"></ul></span>


<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script src='dsv.js'></script>
<script src='zoom_pan.js'></script>
<script src="https://unpkg.com/mathjs/lib/browser/math.js"></script>

<script>
if (!/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
    // hide arrow keys
    for (x of [...document.getElementsByClassName('mobile')])
        x.style.setProperty('display', 'none')
}

function info(text="") {
    document.getElementById("info").innerHTML = text
}

function dragicon(ev) {
    event.dataTransfer.setData("text", "asdf"+ev.target.innerText)
}

for (item of document.getElementsByClassName('fa')) {
    item.draggable = "true"
    item.ondragstart = dragicon
}

function add_drop(query) {
    document.querySelectorAll(query).forEach(x => x.classList.add('dragging'))
}

function remove_drag() {
    for (x of [...document.querySelectorAll(".dragging,.dragover")])
        x.classList.remove('dragging', 'dragover')   /* see 1156633d47d2568781cabc5ebc7c07ad16f6089b */
    return false   // do only once for mousedown, dragend
}

function colorDragStart(e) {
    add_drop(".color")
    e.dataTransfer.effectAllowed = 'move'
    e.dataTransfer.setData('text/html', this.style["background-color"])
}

function colorUpdate(f, rgb) {
    if (!rgb) rgb = f.innerHTML
    if (rgb.startsWith('rgb')) rgb = '#' + rgb.slice(4,-1).split(',').map(x => (+x).toString(16).padStart(2,0)).join('')
    f.style.backgroundColor = rgb
    f.innerHTML = rgb
}

function colorRestyle(f, rgb) {
    colorUpdate(f, rgb)
    Plotly.restyle(graph, {'marker.color': f.innerText, 'error_x.color': f.innerText, 'error_y.color': f.innerText}, f.parentElement.getAttribute("tnum")-1)
}

function colorDrop(e) {
    e.stopPropagation()   // stops the browser from redirecting.
    var rgb = e.dataTransfer.getData('text/html')
    colorRestyle(this, rgb)
    return false
}

// the color boxes
divcols = document.getElementById('colornames')
divcols.onmouseenter = (_ => add_drop(".color"))
divcols.onmouseleave = remove_drag

for (color of Plotly.d3.scale.category10().range()) {
    let div = document.createElement('div')
    div.style['background-color'] = color
    div.draggable = true
    div.ondragstart = colorDragStart
    div.ondragend = remove_drag
    div.onmousedown = (_ => {add_drop(".color"); f = document.activeElement})
    div.onmouseup = (e => {if (f.classList.contains('color')) {
                       colorRestyle(f, e.target.style.backgroundColor); f.focus()}})
    divcols.append(div)
}


for (cell of document.getElementsByClassName('dropcell')) {
    cell.contentEditable = true
    cell.spellcheck = false
    cell.ondragover = handleDragEnter
    cell.ondrop = handleDrop
}

for (cell of document.getElementsByClassName('color')) {
    cell.onchange = (e => colorRestyle(e.target))
    cell.ondrop = colorDrop
}

for (cell of document.querySelectorAll("[contenteditable]")) {
    cell.oninput = function(e) {
        parseNode(this)
    }
    cell.onkeeyup = function(e) {
        if (this.innerText=="\n") {
            // prevent newline when empyting with backspace or del
            this.innerText = ""
        }
    }
}

document.getElementById("funcf").onkeyup = function(e) {if (this.innerText=="\n") {this.innerText = ""}; this.onchange()}


function handleDragStart(e) {
    add_drop("[tnum='1']")
    e.dataTransfer.effectAllowed = 'move'
    dragsrc = this
    // drop strings (normal text, kpool.kbox), except for dropcell kbox (which needs node swap or shift)
    if (kpool.contains(this))
        e.dataTransfer.setData('text/plain', this.innerText)
    else
        e.dataTransfer.setData('text/plain', '')   // @FF68
}

function handleDragEnter(e) {
    e.preventDefault()   // needed otherwise drop is not called
    e.dataTransfer.dropEffect = 'move'
    return false
}

function handleDrag(e) {
    e.preventDefault()   // needed otherwise drop is not called
    //return false
}

function swap(a, b) {
    let dummy = document.createElement("span")
    a.before(dummy)
    b.before(a)
    dummy.replaceWith(b)
}

function handleDrop(e) {
    //e.preventDefault()   // stops the browser from redirecting FF68.
    if (e.dataTransfer.files.length) {
        dsv(e.dataTransfer.files[0], init)
        return false
    }

    kname = e.dataTransfer.getData('text').substring(1)
    if (e.target.className.match("kbox")) {
        if (kname) {
            // kpool.kbox,text -> kbox
            dragsrc = kBox(kname)
            e.target.replaceWith(dragsrc)
        } else
            // kbox -> kbox
            swap(dragsrc, e.target)
        setEndOfContenteditable(dragsrc)
        return false
    } else if (!kname) {
        // kbox -> text
        if (document.caretRangeFromPoint)
            range = document.caretRangeFromPoint(e.clientX, e.clientY)
        else {
            sel.collapse(e.rangeParent, e.rangeOffset)
            range = sel.getRangeAt(0)
        }
        if (p = range.startContainer.parentNode.closest('.kbox')) {
            // prevent dropping into first/last kbox
            sel.focusOffset<2 ? p.parentNode.firstChild.before(dragsrc)
                              : p.parentNode.lastChild.after(dragsrc)
        } else
            range.insertNode(dragsrc)
        setEndOfContenteditable(dragsrc)
        return false
    }
    // kpool.kbox,text -> text
    // else: normal text dropping needs no extra handling
    // drop triggers oninput ("insertFromDrop")
}

// https://github.com/d3/d3-scale-chromatic
schemeTableau10 = "4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab".match(/.{1,6}/g)
schemeSet3 = "8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f".match(/.{1,6}/g)
schemeDark2 = "1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666".match(/.{1,6}/g)

function kBox(colname, responsive=true) {
    let sp = document.createElement('span')
    sp.className = "kbox"
    sp.innerHTML = '<span>$</span>' + colname
    knum = lookup["$"+colname]
    if (knum != undefined) {
        sp.setAttribute('knum', knum)
        //sp.style.color = "#" + schemeSet3[knum % 12]
        sp.style.color = "#" + schemeDark2[knum % 8]
    }
    if (responsive) {
        sp.draggable = true
        sp.addEventListener('dragstart', handleDragStart)
        sp.addEventListener('drag', handleDrag)
        sp.addEventListener('dragenter', e => {e.currentTarget.classList.add("dragover")})
        sp.addEventListener('dragleave', e => {if(sp.contains(e.relatedTarget)) return;   // @FF: do not leave when draging over the child textnode.  CSS ".kbox * {pointer-events: none;}"
                                               e.currentTarget.classList.remove("dragover")})
        sp.addEventListener('dragend', remove_drag)
    }
    return sp
}

function init_box(colpool) {
    var kpool  = document.getElementById('kpool')
    kpool.innerHTML = '' // remove all currents options
    // put all columns into dragable divs
    for (let [k, colname] of colpool.entries()) {
        let sp = kBox(colname)
        sp.onclick = e => {
              if (document.querySelector('.trace_t[tnum="1"]').contains(sel.focusNode)) {
                  range = sel.getRangeAt(0)
                  range.deleteContents()
                  range.insertNode(kBox(e.target.innerText.substring(1)))
              }}
        kpool.appendChild(sp)

        // list entries for suggestion
        let li = document.createElement('li')
        li.append(kBox(colname, responsive=false))
        suggest_list.append(li)
    }
}

function parseCell(cell) {
    cellHTML = cell.innerHTML
    cellText = cell.innerText
    if (cellHTML == +cellHTML) {
        // scalar, e.g. "5"
        result = cellText }
    else if (cell.childElementCount && (cell.children[0].outerHTML == cellHTML) && data[cellText]) {
        // single column
        result = data[cellText]}
    else {
        // column operations
        expr_raw = cellHTML
        knums = new Set()
        for (child of cell.children) {
            knum = child.getAttribute('knum')
            if (knum==null)
                // normal string, e.g. "*8"
                expr_raw = expr_raw.replace(child.outerHTML, child.innerText)
            else {
                expr_raw = expr_raw.replace(child.outerHTML, "$"+knum)
                knums.add(knum)
            }
        }

        // replaces entities ;gt&, ;amp& etc.
        expr_raw = new DOMParser().parseFromString(expr_raw, "text/html").documentElement.textContent
        expr_raw = expr_raw.replace(/\s/g, " ")   // replace protected spaces (caused by nbsp)

        // search for column names starting with $ and ending as a word, e.g. $11 vs $119
        for (k in lookup) {if (k.startsWith('$')) {  u=expr_raw.match("\\"+k+"\\b", "g"); u && knums.add(u[0].replace("$", ""))}}
        // Trim dollar sign and convert to integer
        //knums.add(...expr_raw.match(/\$[0-9]+/g).map(x=>+x.replace("$", "")))

        // console.log(cell.id, expr_raw, knums)
        try {
            expr2 = math.compile(expr_raw).evaluate
            vector = data[0].map((d,i) => {
                argi = {}
                for (k of knums) {
                    d = data[k][i]
                    argi["$"+k] = d=="undefined" || d===""? NaN : d  // NaNs for Mathjs
                }
                return expr2(argi)
            })
        }
        catch (e) {
            cell.classList.add("invalid")
            info('<span style="color:#D00">'+cell.getAttribute('placeholder')+": "+e.message+'</span>')
            return
        }
        result = vector
    }
    cell.classList.contains("invalid") && info()
    cell.classList.remove("invalid")
    return result
}

function using_columns() {
    [cx, cy, ct] = document.getElementById("using").innerText.split(":")
    document.getElementById("cx").innerText = cx
    document.getElementById("cy").innerText = cy
    document.getElementById("ct").innerText = ct
    select_columns()
}

function select_columns() {
    args = {
        x : parseCell(document.getElementById("cx")),
        y : parseCell(document.getElementById("cy")),
        de_x : parseCell(document.getElementById("ce_x")),
        de_y : parseCell(document.getElementById("ce_y")),
        dt : parseCell(document.getElementById("ct")),
        ds : parseCell(document.getElementById("cs")),
        pt : parseCell(document.getElementById("pt")),
        cc : document.getElementById("cc").innerText,
        Do : parseCell(document.getElementById("co")),
    }
    args

    //document.getElementById("using").innerText = x + ":" + y + ":" + ct + ":" + ds
    plot_data(data, args)
    return true
}

var fmtaxis = {
    linecolor: 'black', mirror: true,
    ticks: "inside", mirror: "allticks", zeroline: false
}

function linspace(start, stop, num, endpoint=true) {
    const div = endpoint ? (num - 1) : num
    const step = (stop - start) / div
    return Array.from({length: num}, (_, i) => start + step * i)
}

function empty_func() {
    // a placeholder (function with no data)
    var graph = document.getElementsByClassName("js-plotly-plot")[0]
    expr1 = document.getElementById("funcf").innerText
    if (expr1 == "") Plotly.restyle(graph, {'x':[[]], 'y':[[]]}, 1)
}

function draw_func() {
    var graph = document.getElementsByClassName("js-plotly-plot")[0]
    expr1 = document.getElementById("funcf").innerText
    funcc = document.getElementById("funcc").innerText
    funco = document.getElementById("funco").innerText
    if (expr1 != "") {
        try {
            /* expr = new Function("x", "return "+expr1) */
            // mathjs
            range = [...graph._fullLayout.xaxis.range, 2000]

            // split range
            user_range = expr1.match(/^\s*?\[(.*)\]/)
            if (user_range) {
                expr1 = expr1.replace(user_range[0], "")
                user_range = user_range[1].split(":").map(s => s.trim())
            }

            [expr_y, expr_x] = expr1.split(",").reverse()
            if (expr_x != undefined) {
                // parametric plot
                range = [0, 10, 2000]
            }

            if (user_range) {
                if (user_range.length == 1 && user_range[0]) {
                   range[2] = +user_range[0]
                }
                else if (user_range.length > 1) {
                    if (user_range[0]) range[0] = +user_range[0]
                    if (user_range[1]) range[1] = +user_range[1]
                    if (user_range[2]) range[2] = +user_range[2]
                }
            }

            x1 = t1 = linspace(...range)
            expr2 = math.compile(expr_y.trim()).evaluate

            if (expr_x != undefined) {
                // parametric plot
                expr_x2 = math.compile(expr_x.trim()).evaluate
                x1 = t1.map(t => expr_x2({'t':t}))
                expr = t => expr2({'t':t})
                y1 = t1.map(expr)
            } else {
                if (graph._fullLayout.xaxis.type == 'log') x1 = x1.map(x => 10**x)
                expr = x => expr2({'x':x})
                y1 = x1.map(expr)
            }
        }
        catch(e) {
            info('<span style="color:#D00">expr: '+e.message+'</span>')
            document.getElementById("funcf").classList.add("invalid")
            return false
        }
        funcf.classList.contains("invalid") && info()
        funcf.classList.remove("invalid")
        Plotly.restyle(graph, {'x': [x1], 'y': [y1], 'name': [expr1],
            marker: [{color: funcc}], opacity: funco}, 1)
    }
    for (x of document.querySelectorAll(".gtitle, .xtitle, .ytitle")) {
        // reset attributes for the editable labels
        // needed only for the when page reload (work in first place) + mouse zoom (property removed)
        x.style['cursor'] = 'text'
        x.style['pointer-events'] = 'all'
        x.onclick = edittext
    }
}

function plot_data(data, {x, y, de_x, de_y, dt, ct, ds, pt, cc, Do}) {
    console.log('asdfas', dt, x, y)

    trace1 = {
        type: "scattergl", // https://plotly.com/javascript/webgl-vs-svg/
        x: x,
        y: y,
        name: data._basename,
        mode: 'markers',
        marker: {
            symbol: pt,
            opacity: Do,
            color: cc ? cc : '#404040',
            line: { width: 1,
                color: '#404040'}}
    }
    if (dt) trace1.text = dt   //.map(ti => ""+ct+": "+ti)
    if (ds) trace1.marker.size = ds
    if (de_x) trace1.error_x = {array: de_x, color: cc ? cc : '#404040', opacity: Do, width: 1}
    if (de_y) trace1.error_y = {array: de_y, color: cc ? cc : '#404040', opacity: Do, width: 1}
    cx = document.getElementById("cx").innerText
    cy = document.getElementById("cy").innerText

    traces = [trace1]

    trace2 = {
        type: "line",
        x: [],
        y: [],
    }

    traces.push(trace2)

    layout = {
        autosize: true,
        // height: 394,
        // width: 1121,
        hovermode: 'closest',
        title: title || "csv plotter",
        xaxis: {
            title: xtitle || (cx>-1 ? 'Column '+cx : cx),
            ...fmtaxis
        },
        yaxis: {
            //title: 'Column y',
            title: ytitle || (cy>-1 ? 'Column '+cy : cy),
            ...fmtaxis
        },
        margin: {l: 50, r: 10, b: 40, t: 30}
    }
    // Plotly.plot('plotly-div', {
    Plotly.newPlot('plotly-div', {
        data: traces,
        layout: layout,
        config: {responsive: true,
            scrollZoom: true,
            displaylogo: false,
            modeBarButtonsToRemove: ['select2d', 'lasso2d']}
    })

    draw_func()
    zoompan()


    graph = document.getElementsByClassName("js-plotly-plot")[0]

    graph.on('plotly_click', function(data) {
        let pts = ''
        for (let d of data.points) { // data.point are not all points from one trace
            pts = "#" + (d.pointNumber+1) + ":  x = " + d.x + ", y = " + d.y
            d['error_x.array'] === undefined || (pts += ", e_x = " + d['error_x.array'])
            d['error_y.array'] === undefined || (pts += ", e_y = " + d['error_y.array'])
            d.text === undefined || (pts += ', ' + d.text)
            d['marker.size'] === undefined || (pts += ", ps = " + d['marker.size'])
            d['marker.symbol'] === undefined || (pts += ", pt = " + d['marker.symbol'])
        }
        info('Closest point clicked: ' + pts)
    })

    graph.on('plotly_relayout', function(event) {
        // recompute the function for new ranges after zoom (resize?)
        draw_func()
    })

}


gwidth = null
gheight = null
let observer = new MutationObserver(function(mutations) {
    var graph = document.getElementById("plotly-div")
    var resized = graph.style.width && graph.style.height && (gwidth != graph.style.width) || (gheight != graph.style.height)
    gwidth = graph.style.width
    gheight = graph.style.height
    if (resized) {
        window.dispatchEvent(new Event('resize'))
    }
})

observer.observe(document.getElementById('plotly-div'), {attributes: true})


// allow to pre-fill fields and url
url_kwargs = Object.fromEntries(new URL(window.location).searchParams)
url = url_kwargs["url"]


function parseNode(node) {
    keys = [...colnames, "0", ...colnames.map((x,i) => ""+(i+1))].sort().reverse()

    kpool.after(suggest_div)           // do not count characters
    suggest_list.style.display = ""

    let sel = window.getSelection()
    if (node.contains(sel.focusNode)) {
        sel.extend(node.firstChild)
        seltext = sel.toString()
    } else
        seltext = node.innerText
    curpos = seltext.replace("\n", "").replace("\r", "").length

    let toparse = node.innerText.split("$")
    node.innerHTML = toparse.shift()   // Consume the first text. It's "", when string starts with "$".

    let curnode = node.firstChild   // a text node
    let qname = ''
    for (let text of toparse) {
        let kname = text
        let hit = keys.find(k => text.startsWith(k))
        if (hit)
            kname = hit
        else {
            querylen = curpos - node.innerText.length - 1
            if (querylen <= text.length)
                // knode will be a kBox without knum and is rendered differently (wavy underline)
                kname = qname = text.substring(0, querylen)
        }
        knode = kBox(kname)
        if (node.innerText.length < curpos) curnode = knode.lastChild   // text node (not $)
        node.append(knode)
        text = text.substring(kname.length)   // split off kname
        if (text != "") node.append(text)
        if (node.innerText.length - text.length < curpos) curnode = node.lastChild
    }

    // put the caret in rendered element
    node.focus()   // only for FF68 (NS_ERROR_FAILURE, https://bugzilla.mozilla.org/show_bug.cgi?id=1623413)
    sel.setBaseAndExtent(node, 0, curnode, 0)
    let offset = curpos - sel.toString().length
    sel.extend(curnode, offset)
    sel.collapseToEnd()
    node.focus()   // no effect?

    qname && filter_suggests(curnode.parentNode)
}

function init() {
    // after reading data:
    colpool = arguments[0]._colnames

    // render column names in plot fields
    lookup = {"$0": 0}
    // lookup has both column names and column number
    // e.g. $4, "$colname" "colname" => 4
    for ([i,k] of colpool.entries()) {lookup["$"+(i+1)] = lookup["$"+k] = lookup[k] = i+1}

    init_box(colpool)

    var fs = url_kwargs.expand
    delete url_kwargs.expand
    xtitle = url_kwargs.xtitle || ""
    delete url_kwargs.xtitle
    ytitle = url_kwargs.ytitle || ""
    delete url_kwargs.ytitle
    title = url_kwargs.title  || ""
    delete url_kwargs.title

    for (arg in url_kwargs) {
        t = document.getElementById(arg)
        t.innerHTML = url_kwargs[arg]
        parseNode(t)
    }

    select_columns()   // plots data
    if (fs != undefined) expand.click()
}

dsv(url, init)


// create shared link
document.getElementById("share").onclick = function() {
    _url = new URL(window.location)
    _url = _url.origin + _url.pathname + "?"
    _url += (xtitle && "xtitle="+xtitle+"&")
         +  (ytitle && "ytitle="+ytitle+"&")
         +  (title  && "title="+title+"&")
    _url += [...document.querySelectorAll(".drop,.dropcell")].map(x => {val=x.innerText; if (val) return x.id+'='+val}).filter(x=>x).join('&')
    _url = _url.replace(/#/g, '%23').replace(/\+/g, '%2B')
    var link = document.createElement("a")
    link.href = _url
    link.append(_url)
    info(link.outerHTML)
}


function edittext(svgtext) {
    // to edit xtitle etc.
    svgtext = svgtext.target
    var input = document.createElement("input")
    input.value = svgtext.textContent
    input.svg = svgtext
    graph.onmouseover = null   // remove temporarily the focus stealing from zoompan.js

    // input.onkeyup = function(e) {
    input.addEventListener('keyup', function(e) {
        //e.stopPropagation()
        if (["Enter", "Escape"].includes(e.key)) {this.blur()}
        else {svgtext.textContent = this.value}
        return false
    }, true)

    input.onkeydown = function (e) {
        // keyup+enter is not called?! thus keydown
        if (["Enter"].includes(e.key)) {
            (this.svg.getAttribute('class') == "xtitle") && (xtitle = this.value)
            (this.svg.getAttribute('class') == "ytitle") && (ytitle = this.value)
            (this.svg.getAttribute('class') == "title") && (title = this.value)
        }
    }

    input.onblur = function(e) {
        //if (e.relatedTarget) {e.stopPropagation(); e.stopImmediatePropagation(); this.focus(); return}
        myforeign.remove()
        graph.onmouseover = graph.focus   // restore focus behaviour from zoompan.js
    }

    input.onchange = function (e) {
        // update the titles in plotly
        var val = e.target.parentNode.parentNode.classList.value
        var a = {"g-xtitle" : 'xaxis.', "g-ytitle" : 'yaxis.', "g-gtitle":''}
        if (val=="g-xtitle") xtitle && (xtitle=e.target.value)
        if (val=="g-ytitle") ytitle && (ytitle=e.target.value)
        if (val=="g-gtitle")  title && (title=e.target.value)
        a = a[val] + 'title'
        b = {}; b[a] = e.target.value
        Plotly.relayout(graph, b)
        graph.onmouseover = graph.focus   // restore focus behaviour from zoompan.js, relayout removes the foreign object
    }

    var myforeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject')
    myforeign.setAttribute("width", "100%")
    myforeign.setAttribute("height", "100%")
    myforeign.setAttribute("x", svgtext.attributes['x'].nodeValue)
    myforeign.setAttribute("y", math.max(svgtext.attributes['y'].nodeValue-35, 10))
    myforeign.append(input)

    svg = svgtext.parentNode
    svg.append(myforeign)
    console.log(svg.children, svgtext.textContent)

    input.focus()
}

window.onbeforeunload = function(e) {
    // prevent following github link accidentally
    if (e.srcElement.activeElement.id == 'github')
        return 'Are you sure you want to leave?'
}


function suggest_hover_kdb(e) {
    e.preventDefault()
    hover = document.querySelector('.show.hover')
    // find next proposal
    if (hover) {
        while (hover = hover[(e.key=="ArrowUp"? 'previous':'next') + 'ElementSibling']) {
            if (hover.classList.contains('show')) break
        }
        if (!hover)  // stick to the element (first/last if not found)
            return
    }
    old = document.querySelector('.hover')
    old && old.classList.remove('hover')
    hover && hover.classList.add('hover')
}

function suggest_hover(e) {
    // mouseover
    old = document.querySelector('.hover')
    old && old.classList.remove('hover')
    e.target.classList.add('hover')
}

function filter_suggests(foc) {
    foc.before(suggest_div)
    let n = 0
    let query = foc.innerText.toLowerCase().replace("$","")
    for (let option of suggest_list.children) {
        if (option.innerText.toLowerCase().match(query)
            || option.firstChild.getAttribute("knum").match(query)) {
            option.classList.add('show')
            ++n
        }
        else option.classList.remove('show', 'hover')
    }
    // keep last proposal or propose first element
    (hover = suggest_list.querySelector('.show.hover')) ||
        (hover = suggest_list.querySelector('.show')) && hover.classList.add('hover')
    suggest_list.style.display = n>0 ? 'block' : ''
    // if there is only unique match, apply immediately
    if (n==1 && (hover.firstChild.getAttribute("knum") == query
                      || hover.innerText.toLowerCase() == query))
        suggest_hit(hover)
}

function suggest_hit(e) {
    hover = e.target || e
    if (hover) {
        hover = hover.firstChild
        let newKbox = kBox(hover.innerText.substring(1))
        sel.focusNode.parentNode.replaceWith(newKbox)
        setEndOfContenteditable(newKbox)
    }
    suggest_list.style.display = ""
    e.preventDefault && e.preventDefault()  // do not insert newline
    return // prevent caret movement
}

suggest_div = document.getElementById("suggest_div")
suggest_list = document.getElementById("suggest_list")
suggest_list.onmouseover = suggest_hover
suggest_list.onmousedown = suggest_hit

function handle_keydown(e) {
    if (e.key=="ArrowDown" || e.key=="ArrowUp") {
        if (suggest_list.style.display == "") {   // case: re-entering span
            // same as oninput
            foc = sel.focusNode.parentElement
            if (foc.tagName=='SPAN') filter_suggests(foc)
        }
        suggest_hover_kdb(e)
        return true
    }
    if (e.key == "Enter") {
        if (suggest_list.style.display!="" && (hit=document.querySelector('.show.hover'))) {
            suggest_hit(hit)
            e.preventDefault()
            return true
        } else {
            try {this.onchange(e)}
            finally {return false}   // no newline for Enter press
        }
    }
}

for (item of document.querySelectorAll(".trace_t:first-child > span.dropcell")) {
    item.onkeydown = handle_keydown
    item.onblur = () => {suggest_list.style.display = ""}
}

function setEndOfContenteditable(contentEditableElement, atstart=false) {
    var range = document.createRange()     // create a range (a range is a like the selection but invisible)
    range.selectNodeContents(contentEditableElement) // select the entire contents of the element with the range
    range.collapse(atstart)                // collapse the range to the end point. false means collapse to end rather than the start
    var selection = window.getSelection()  // get the selection object (allows you to change selection)
    selection.removeAllRanges()            // remove any selections already made
    selection.addRange(range)              // make the range you have just created the visible selection
}

var sel = window.getSelection()
var foc

//document.onselectionchange = mark_active

function mark_active(e) {
    // highlight the span with caret
    foc && foc.classList.remove('active')
    foc = sel.focusNode.parentElement
    if (document.getElementsByClassName("trace_t")[0] == foc.parentElement.parentElement)
        foc.classList.add("active")
    else
        // hide suggest list when leaving the box
        suggest_list.style.display = ""
}

</script>

<style>
    .plotypicon {
        width: 18px;
        height: 18px;
        border: 1px solid grey;
    }
</style>

<div id="plottyp" bla='"https://github.com/plotly/plotly-icons/tree/master/src/svg https://plotly-icons.ineffable.digital/">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-error-bars.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-histogram.svg" class="plotypicon"'>
</div>


</html>
