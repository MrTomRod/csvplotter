<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title>csv plotter</title>

    <style type="text/css">
    input, .dragtarget {
        font-family: Tahoma;
        padding: 2px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    div.dragtarget {
        min-height: 20px;
        min-width: 120px;
        background-color: white;
        vertical-align: middle;
        display: table-cell;
        padding: 0px 2px;
    }

    .coli {
        border: 1px solid #ccc;     /* grey*/
        background-color:  #c5edfb; /* a light blue */
     }

    .coli, div[contenteditable=true]{
        display: inline-block;
        cursor: move;
        padding: 0px 4px;
        font-size: 1.2em;
        cursor: pointer;
    }
   .coli:nth-child(n+1){
        counter-increment: rowNumber;
    }
   .coli::before {
        content: counter(rowNumber);
        vertical-align: super;
        font-size: smaller;
        color: grey;
    }

    .coli:active {
        opacity : 0.4;
    }

    .dragging .dragtarget > .coli, .dragging.dragtarget > .coli, .dragtarget:focus-within > .coli {
        /* remove top bottom because focussing outer div border need more space */
        border-style: none solid;
    }

    #colnames > .coli {
        margin: 3px;
    }

     div.dragtarget.color {
         min-width: 43px;
     }

    div.dragtarget.opacity {
         min-width: 23px;
     }

    .trace {
        border-color: #ccc;
        border-style: solid;
        border-width: 1px;
        padding: 2px;
        display: flex
    }

    .trace:focus, .trace:focus-within {
        border-color: #6399cb;
        padding: 1px;
        border-width: 2px;
    }

    .dragging .dragtarget, .dragging.dragtarget, .dragtarget:focus-within {
        border-radius: 4px;
        box-sizing: border-box;
        border: 2px solid #009900; /* greeen */
        padding: 0px 1px;
    }

    #colornames {
        display: flex;
        flex-wrap: nowrap;
    }

    #colornames > div {
        width: 40px;
        height: 20px;
        margin: 2px;
    }

    #colornames > div:active {
        opacity : 0.4;
    }

    .dragtarget.color:not(:hover):not(:focus) {
        /* slowly hide hex string */
        transition: 1s;
        color: transparent;
    }

    label {
        margin: 0 1px 0 6px;
    }

    </style>
</head>

<body style="font-family: verdana; font-size: 70%">

<div id="plotly-div"></div>
<div id="info">info:</div>

<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script src='dsv.js'></script>
<script src='zoom_pan.js'></script>
<script src="https://unpkg.com/mathjs/lib/browser/math.js"></script>

<div style="display:flex">
   <span title="xtitle"><label>xtitle</label><input id="xtitle" placeholder="xtitle" onchange="document.getElementsByClassName('xtitle')
[0].textContent = event.target.value;"></span>

   <div id="colornames" style="height:20px">
   </div>
   <button id="share"><i class="fa fa-share-alt"></i></button>
</div>


<fieldset style="display:flex; flex-direction: column; flex:1">
<legend>Data</legend>
   <div>
      <div class="trace edit" tabIndex=0>
         <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon"> <label>file:</label><label for="csvFileInput" class="input" style="display: inline-block;  text-align: left; border: 1px solid #ccc">Choose file</label>
         <input id="csvFileInput" type="file" style="display:none" onchange="this.previousElementSibling.textContent = this.previousElementSibling.title = this.files[0].name; dsv(this.files[0], plot_data)">
         <label style="display: none">using</label><div id="using" placeholder="1:2" contenteditable onchange="using_columns()" style="width: 200px; display: none">1:2</div>
         <label>x</label><div id="colx" list="colx_list" class="dragtarget" placeholder="1" onchange="select_columns()"></div>
         <datalist id="colx_list"></datalist>
         <label>y</label><div id="coly" list="coly_list" class="dragtarget" placeholder="2" onchange="select_columns()"></div>
         <datalist id="coly_list"></datalist>
         <label><i class="fa fa-tag" draggable="true" ondragstart="dragicon(event)"></i></label><div id="colt" list="colt_list" class="dragtarget" placeholder="3" onchange="select_columns()"></div>
         <datalist id="colt_list"></datalist>
         <label><i class="fa fa-bullseye" draggable="true" ondragstart="dragicon(event)"></i></label><div id="cols" list="cols_list" class="dragtarget" placeholder="6" onchange="select_columns()">asdf</div>
         <datalist id="cols_list"></datalist>
         <label><i class="fa fa-tint" draggable="true" ondragstart="dragicon(event)"></i></label><div id="colc" list="colc_list" class="dragtarget color" placeholder="4" contentEditable onchange="select_columns()"></div>
         <datalist id="colc_list"></datalist>
         <label><i class="fa fa-adjust" draggable="true" ondragstart="dragicon(event)"></i></label><div id="colo" list="colo_list" class="dragtarget opacity" placeholder="4" contentEditable onchange="select_columns()">0.5</div>
         <datalist id="colo_list"></datalist>
         <div info="dummy otherwise drop would be allow here!?"></div> 
      </div>
      <div class="trace">
         <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
         <span title="df"><label>f1(x)=</label><input id="func1" placeholder="sin(x)" onchange="empty_func(); draw_func()"></span>
         <label><i class="fa fa-tint" draggable="true" ondragstart="dragicon(event)"></i></label><div type="search" id="fcolc" list="colc_list" class="dragtarget color" placeholder="4" contentEditable onchange="select_columns()"></div>
         <div info="dummy otherwise drop would be allow here!?"></div> 
      </div>
   </div>
</fieldset>

<div id="colnames">
</div>



<script>

function dragicon(ev) {
   event.dataTransfer.setData("text", "asdf"+ev.target.innerText);
}

function add_drag(classname) {
    document.getElementsByClassName(classname).forEach(x => x.classList.add('dragging'))
}

function remove_drag() {
    for(x of [...document.getElementsByClassName("dragging")])
        {x.classList.remove('dragging')}
    return false   // do only once for mousedown, dragend
}

function colorDragStart(e) {
    add_drag("color")

    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.style["background-color"]);
}

function colorDrop(e) {
    e.stopPropagation(); // stops the browser from redirecting.
    var rgb = e.dataTransfer.getData('text/html');
    rgb = '#' + rgb.slice(4,-1).split(',').map(x => (+x).toString(16).padStart(2,0)).join('')
    this.style["background-color"] = rgb
    this.innerHTML = rgb
    var trace = e.target.id == "fcolc";
    Plotly.restyle(document.getElementsByClassName('js-plotly-plot')[0], {'marker.color': rgb}, 1*trace)
    return false
}

// the color boxes
divcols = document.getElementById('colornames');
for (color of Plotly.d3.scale.category10().range()) {
    let div = document.createElement('div');
    div.style['background-color'] = color;
    div.draggable = true;
    div.onmousedown = (_ => add_drag("color"))
    div.onmouseover = (_ => add_drag("color"))
    div.ondragstart = colorDragStart
    div.ondragend = div.onmouseup = div.onmouseleave = remove_drag
    divcols.append(div);
}

for (item of document.getElementsByClassName('dragtarget')) {
    item.onkeydown = function(e){if (e.key == "Enter") {this.onchange(); this.style["background-color"] = this.innerHTML; return false}}  // no newline for Enter press
    item.ondragover = handleDragOver
    item.ondrop = handleDrop
}

document.getElementById("colc").ondrop = colorDrop
document.getElementById("fcolc").ondrop = colorDrop

for (var div of ['colx', 'coly', 'colt', 'cols', 'colc']) {
    var div = document.getElementById(div)
    div.tabIndex = 0
    div.onfocus = (_ => {var t = _.target;
                       for (a of document.getElementsByClassName("coli")) {
                           a.onmouseover = (_ =>  {t.focus(); return false})
                           a.onclick = (e => {t.innerHTML = ''; t.append(colBox(e.target.id)); t.onchange(); t.focus()})}})
}


function handleDragStart(e) {
    add_drag("trace edit")
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.id);
}

function handleDragOver(e) {
    e.preventDefault();   // needed otherwise drop is not called
    e.dataTransfer.dropEffect = 'move';
    return false;
}

function handleDrop(e) {
    e.stopPropagation(); // stops the browser from redirecting.
    id = e.dataTransfer.getData('text/html')
    src = document.getElementById(id)
    if (id.startsWith('colcol')) {
        // swap
        srcloc = src.parentNode
        this.prepend(src)
        this.children[1] && srcloc.prepend(this.children[1])  // case: empty dragging target
    }
    else {
        clone = colBox(id)

        // append editable div
        let div = document.createElement('div');
        div.style['background-color'] = "red"
        div.innerText = ' '
        div.contentEditable = "true"

        this.innerHTML = ''
        this.append(clone, div)
    }
    this.onchange()
    this.focus()
    return false
}

function colBox(k, colname=""){
    let div = document.createElement('div');
    div.innerHTML = colname || document.getElementById(k).innerHTML
    div.className = "coli"
    div.id = 'col' + k
    div.draggable = true
    div.addEventListener('dragstart', handleDragStart)
    div.addEventListener('dragend', remove_drag)
    return div
}

function do_drop(colnames){
    // list option
    colx = document.getElementById('colx_list');
    coly = document.getElementById('coly_list');
    colt = document.getElementById('colt_list');
    for (list of [colx, coly, colt]){
        list.innerHTML = '' // remove all currents options
        for (colname of colnames) {
            let option = document.createElement('option');
            option.value = colname;
            // option.id = colname;   // for dict-like access and to check is id in present
            list.appendChild(option);
        }
    }

    c1  = document.getElementById('colnames');
    //c1.addEventListener('mouseover', (_ => {add_drag("trace edit")}) );
    //c1.addEventListener('mouseleave', (_ => {remove_drag("trace edit")}) );
    c1.innerHTML = '' // remove all currents options
    // put all columns into dragable divs
    for (let [k, colname] of colnames.entries()) {
        let div = colBox(k+1, colname);
        c1.appendChild(div);
    }

    colx.addEventListener('dragover', handleDragOver);
    coly.addEventListener('drop', handleDrop);
}

function using_columns(){
    [cx, cy, ct] = document.getElementById("using").innerText.split(":")
    document.getElementById("colx").innerText = cx
    document.getElementById("coly").innerText = cy
    document.getElementById("colt").innerText = ct
    select_columns()
}

function select_columns(){
    cx = document.getElementById("colx").innerText
    cy = document.getElementById("coly").innerText
    ct = document.getElementById("colt").innerText
    cs = document.getElementById("cols").innerText
    cc = document.getElementById("colc").innerText
    co = document.getElementById("colo").innerText
    document.getElementById("using").innerText = cx + ":" + cy + ":" + ct + ":" + cs
    plot_data(data, cx, cy, ct, cs, cc, co)
    return true;
}

var fmtaxis = {
    linecolor: 'black', mirror: true,
    ticks: "inside", mirror: "allticks", zeroline: false
}

function linspace(start, stop, num, endpoint=true) {
    const div = endpoint ? (num - 1) : num;
    const step = (stop - start) / div;
    return Array.from({length: num}, (_, i) => start + step * i);
}

function empty_func(){
    // a placeholder (function with no data)
    var graph = document.getElementsByClassName("js-plotly-plot")[0];
    expr1 = document.getElementById("func1").value
    if (expr1 == "") Plotly.restyle(graph, {'x':[[]], 'y':[[]]}, 1)
}

function draw_func(){
    var graph = document.getElementsByClassName("js-plotly-plot")[0];
    expr1 = document.getElementById("func1").value
    if (expr1 != "") {
        expr = new Function("x", "return "+expr1);
        // mathjs
        expr2 = math.compile(expr1).evaluate ;
        expr = x => expr2({'x':x})
        x1 = linspace(...graph._fullLayout.xaxis.range, 200)
        y1 = x1.map(expr)
        Plotly.restyle(graph, {'x':[x1], 'y':[y1], 'name': [expr1]}, 1)
    }
    for (x of ['xtitle', 'ytitle', 'gtitle']){
        // reset attributes for the editable labels
        // needed only for the when page reload (work in first place) + mouse zoom (property removed)

        document.getElementsByClassName(x)[0].style['cursor'] = 'text'
        document.getElementsByClassName(x)[0].style['pointer-events'] = 'all'
        document.getElementsByClassName(x)[0].onclick = edittext
    }
}

function plot_data(data, cx=4, cy=5, ct="", cs="", cc="", co=0.5){
    x = data[cx]
    y = data[cy]

    console.log('asdfas', cx, cy, ct, x, y)

    trace1 = {
        type: "scattergl", // https://plotly.com/javascript/webgl-vs-svg/
        x: x,
        y: y,
        //text: t.map(ti => ""+ct+": "+ti), //.map((xi, i) => xi+" "+y[i]),
        name: data._basename,
        mode: 'markers',
        marker: { //size:4,
            opacity: co,
            color: cc ? cc : '#404040',
            line: { width: 1,
                color: '#404040'}}
    };
    if (ct) trace1.text = data[ct].map(ti => ""+ct+": "+ti)
    if (cs) trace1.marker.size = data[cs]

    traces = [trace1];
   /*
   expr1 = document.getElementById("func1").value
   if (expr1!="") {
       expr = new Function("x", "return "+expr1);
       x1 = x.filter(x => !isNaN(x))
       x1 = linspace(Math.min(...x1), Math.max(...x1), 200)
       y1 = x1.map(expr)
 */
    trace2 = {
        type: "line",
        x: [],
        y: [],
    };

    traces.push(trace2)

    layout = {
        autosize: true,
        height: 394,
    //  width: 1121,
        hovermode: 'closest',
        title: "csv plotter",
        xaxis: {
            title: (cx>-1 ? 'Column '+cx : cx),
            ...fmtaxis
        },
        yaxis: {
            title: (cy>-1 ? 'Column '+cy : cy),
            ...fmtaxis
        },
        margin: {l: 50, r: 10, b: 40, t: 30}
    };
//   Plotly.plot('plotly-div', {
    Plotly.newPlot('plotly-div', {
        data: traces,
        layout: layout,
        config: {responsive: true,
            scrollZoom: true,
            displaylogo: false,
            modeBarButtonsToRemove: ['select2d', 'lasso2d']}
    });

    draw_func()
    zoompan()


    var myPlot = document.getElementById('plotly-div')
    graph = document.getElementsByClassName("js-plotly-plot")[0];

    graph.on('plotly_click', function(data){
        var pts = '';
        console.log(data)
        for(var i=0; i < data.points.length; i++){
            pts = 'x = '+data.points[i].x +', y = '+
            data.points[i].y + ', ' + data.points[i].text;
        }
        document.getElementById("info").innerHTML = 'Closest point clicked: ' + pts;
    });

    graph.on('plotly_relayout', function(eventdata){
        // recompute the function for new ranges after zoom
        draw_func()
    });

}

let observer = new MutationObserver(function(mutations) {
   window.dispatchEvent(new Event('resize'));
});

observer.observe(document.getElementById('plotly-div'), {attributes: true})

url = '';
// allow to pre-fill fields and url
(new URL(window.location)).searchParams.forEach((val, id) => {
    console.log(id, val);
    if (id=="url") url = val
    else document.getElementById(id).innerHTML = val
});


dsv(url, function(){do_drop(arguments[0]._colnames); plot_data(...arguments, ...[..."xytsco"].map(x => document.getElementById('col'+x).innerText))})


function edittext(svgtext){
    //console.log(svgtext)
    svgtext = svgtext.target
    var input = document.createElement("input");
    input.value = svgtext.textContent
    // input.onkeyup = function(e){
    input.addEventListener('keyup', function(e){
       //e.stopPropagation()
        if (["Enter", "Escape"].includes(e.key)) {this.blur(); }
        else {svgtext.textContent = this.value};
        return false
    }, true)
    input.onblur = function(e){
     //if (e.relatedTarget){e.stopPropagation(); e.stopImmediatePropagation(); this.focus(); return}
        myforeign.remove()
    }

    input.onchange = function (e) {
        // update the titles in plotly
        var val = e.target.parentNode.parentNode.classList.value
        var a = {"g-xtitle" : 'xaxis.', "g-ytitle" : 'yaxis.', "g-gtitle":''};
        a = a[val] + 'title'
        b = {}; b[a] = e.target.value
        Plotly.relayout(graph, b)
    }

    var myforeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject')
    myforeign.setAttribute("width", "100%");
    myforeign.setAttribute("height", "100%");
    myforeign.setAttribute("x", svgtext.attributes['x'].nodeValue);
    myforeign.setAttribute("y", svgtext.attributes['y'].nodeValue-35);
    myforeign.append(input);

    svg = svgtext.parentNode
    svg.append(myforeign);
    console.log(svg.children, svgtext.textContent)

    input.focus()
}

// create share link
document.getElementById("share").onclick = function(){
   _url = new URL(window.location);
   _url = _url.origin+_url.pathname+'?url=' + url +
         [...'xytsco'].map(x => {val=document.getElementById('col'+x).innerText; if (val) return '&col'+x+'='+val}).join('');
   var link = document.createElement("a")
   _url = _url.replace(/#/g, '%23')
   link.href = _url
   link.append(_url)
   document.getElementById('info').innerText = ''
   document.getElementById('info').append(link)
}

</script>

<style>
    .plotypicon {
        width: 18px;
        height: 18px;
        border: 1px solid grey;
    }
</style>

<div id="plottyp" bla="https://github.com/plotly/plotly-icons/tree/master/src/svg https://plotly-icons.ineffable.digital/">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-error-bars.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-histogram.svg" class="plotypicon">
</div>


</html>

