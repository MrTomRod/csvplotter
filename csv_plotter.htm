<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <title>csv plotter</title>

    <style type="text/css">
    .invalid  {
        box-shadow: 0 0 3px 1px #900 !important;   /* red */
    }

    [contenteditable=true]:empty:not(:focus):before {
        content: attr(placeholder);
        color: #ccc;
    }

    input, .dropcell {
        font-family: Tahoma;
        font-size: 13px;
        padding: 2px;
    }

    div.dropcell, div.func {
        min-height: 20px;
        min-width: 40px;
        display: table-cell;
        flex-grow: 1;
        padding: 4px 0px;
        /*border-right: #ccc 1px solid; */
        overflow: hidden;
        box-shadow: #ddd -1em 0px 1em -1em inset;   /* greying out rightwards */
    }

    .dragging.dropcell, .dragging .dropcell, .dropcell:focus-within,  div.func:focus-within  {
        box-shadow: 0 0 3px 1px #090;   /* green */
    }

    .coli {
        border: 1px solid #ccc;      /* grey*/
        background-color: #c5edfb;   /* a light blue */
    }

    .coli, div[contenteditable=true]{
        display: inline-block;
        cursor: move;
        padding: 0px 4px;
        font-size: 1.2em;
        cursor: pointer;
    }
 
    .coli::before {
        content: attr(knum);
        vertical-align: super;
        font-size: smaller;
        color: grey;
    }

    .coli:active {
        opacity: 0.4;
    }

    #colpool > .coli {
        margin: 3px;
    }

    div.dropcell.color {
        width: 25px;
        flex-grow: 0;
    }

    div.dropcell.opacity {
        width: 15px;
        flex-grow: 0;
    }

    .dropcell.color:not(:hover):not(:focus) {
        /* slowly hide hex string */
        transition: color 1s;
        color: transparent;
    }

    .trace {
        border-color: #ccc;
        border-style: solid;
        border-width: 1px;
        display: flex;
        padding: 0 0 0 4px;
    }

    .trace:focus, .trace:focus-within {
        border-color: #6399cb;
    }
    .trace > label {
        font-weight: bold;
        font-style:  italic;
        color: #ccc;
    }
    .trace:focus > label, .trace:focus-within > label {
        color: #6399cb;
    }

    #colornames {
        display: flex;
        flex-wrap: nowrap;
    }

    #colornames > div {
        min-width: 20px;
        height: 20px;
        margin: 2px;
    }

    #colornames > div:active {
        opacity : 0.4;
    }

    label {
        margin: 0 1px 0 6px;
    }

    /* fullscreen mode + uncomment height in plot_data*/
    #plotly-div {
        flex-grow: 20;
    }

    body {
        display:flex;
        flex-direction: column;
    }
    .vis {
        opacity: 0.4;
        transition: opacity 0.2s;
        border: none;
        border-radius: 4px; 
        padding: 4px 6px;
    }
    .vis:hover {
        opacity: 1;
    }

    </style>
</head>

<body style="font-family: verdana; font-size: 70%; margin: 0">

<div style="position: fixed; left: 20px; top: 10px;; z-index: 10000">
   <button id="expand" class="vis" onclick="this.children[0].classList.toggle('fa-expand') ?  document.webkitExitFullscreen() : document.documentElement.webkitRequestFullscreen()"><i class="fas fa-expand fa-compress"></i></button>
   <button id="console" class="vis" 
onclick="[document.getElementsByTagName('body')[0].style.height,  graph.style.height] = this.children[0].classList.toggle('fas') ?  ['','100vh'] : ['100vh', ''];"><i class="far fa-keyboard"></i></button>
</div>

<div id="plotly-div"></div>
<div style="display: flex;"><i class="fa fa-info" style="padding: 0px 5px;"></i>
    <div id="info" style="flex-grow: 1"></div>
    <button id="share" style="border-width:1px; border-radius: 2px; border-color: #bbb; padding: 0px 8px; font-size: larger"><i class="fa fa-share-alt"></i></button>
    <a id="github" style="text-decoration: none; color: black; display: flex;
    justify-content: center;
    align-items: center; border-width:1px; border-radius: 2px; border-color: #bbb; padding: 0px 8px; font-size: large" href="https://github.com/mzechmeister/csvplotter"><i class="fab fa-github"></i></a>
</div>


<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script src='dsv.js'></script>
<script src='zoom_pan.js'></script>
<script src="https://unpkg.com/mathjs/lib/browser/math.js"></script>

<div>
   <div id="colornames" style="height:20px; float:right">
   </div>
</div>


<div class="traces" style="background: white; margin: 5px 0;">
   <div class="trace" tnum=1 tabIndex=0>
         <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon">
         <label><i class="far fa-file"></i></label><div id="url" class="dropcell"><label for="csvFileInput" style="display: inline-block; text-align: left; border: 1px solid #ccc"></label>
         <input id="csvFileInput" type="file" style="display:none" onchange="this.previousElementSibling.textContent = this.previousElementSibling.title = this.files[0].name; dsv(this.files[0], plot_data)" placeholder="Choose file"></div>
         <label style="display: none">using</label><div id="using" placeholder="1:2" contenteditable onchange="using_columns()" style="width: 200px; display: none">1:2</div>
         <label>x</label><div id="cx" list="colx_list" class="dropcell" placeholder="x" onchange="select_columns()"></div>
         <datalist id="colx_list"></datalist>
         <label>y</label><div id="cy" list="coly_list" class="dropcell" placeholder="y" onchange="select_columns()"></div>
         <datalist id="coly_list"></datalist>
         <label><i class="fa fa-arrows-alt-h"></i></label><div id="ce_x" list="colx_list" class="dropcell" placeholder="err_x" onchange="select_columns()"></div>
         <label><i class="fa fa-arrows-alt-v"></i></label><div id="ce_y" list="colx_list" class="dropcell" placeholder="err_y" onchange="select_columns()"></div>
         <label><i class="fa fa-tag"></i></label><div id="ct" list="colt_list" class="dropcell" placeholder="label" onchange="select_columns()"></div>
         <datalist id="colt_list"></datalist>
         <label><i class="fa fa-bullseye"></i></label><div id="cs" list="cols_list" class="dropcell" contenteditable placeholder="size" onchange="select_columns()"></div>
         <datalist id="cols_list"></datalist>
         <label><i class="fa fa-tint"></i></label><div id="cc" list="colc_list" class="dropcell color" placeholder="color" contenteditable onchange="select_columns()"></div>
         <datalist id="colc_list"></datalist>
         <label><i class="fa fa-adjust"></i></label><div id="co" list="colo_list" class="dropcell opacity" placeholder="opac" contenteditable onchange="select_columns()">0.5</div>
         <datalist id="colo_list"></datalist>
         <div info="dummy otherwise drop would be allow here!?"></div> 
      </div>
      <div class="trace" tnum=2>
         <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
         <label><i class="fa fa-calculator"></i></label><div id="funcf" class="dropcell func" contenteditable="true" onchange="empty_func(); draw_func(); console.log('ch')" placeholder="f(x)"></div>
         <label><i class="fa fa-tint"></i></label><div type="search" id="funcc" list="colc_list" class="dropcell color" placeholder="color" contenteditable onchange="select_columns()"></div>
         <label><i class="fa fa-adjust"></i></label><div id="funco" class="dropcell opacity" contenteditable onchange="select_columns()">0.5</div>
         <div info="dummy otherwise drop would be allow here!?"></div> 
    </div>
</div>

<div id="colpool">
</div>



<script>

function dragicon(ev) {
    event.dataTransfer.setData("text", "asdf"+ev.target.innerText);
}

for (item of document.getElementsByClassName('fa')) {
    item.draggable = "true"
    item.ondragstart = dragicon
}

function add_drag(query) {
    document.querySelectorAll(query).forEach(x => x.classList.add('dragging'))
}

function remove_drag() {
    for(x of [...document.getElementsByClassName("dragging")])
        {x.classList.remove('dragging')}
    return false   // do only once for mousedown, dragend
}

function colorDragStart(e) {
    add_drag(".color")

    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.style["background-color"]);
}

function colorUpdate(f, rgb) {
    if (!rgb) rgb = f.innerHTML
    if (rgb.startsWith('rgb')) rgb = '#' + rgb.slice(4,-1).split(',').map(x => (+x).toString(16).padStart(2,0)).join('')
    f.style.backgroundColor = rgb
    f.innerHTML = rgb
}

function colorRestyle(f, rgb) {
    colorUpdate(f, rgb)
    Plotly.restyle(graph, {'marker.color': f.innerHTML}, f.parentElement.getAttribute("tnum")-1)
}

function colorDrop(e) {
    e.stopPropagation(); // stops the browser from redirecting.
    var rgb = e.dataTransfer.getData('text/html');
    colorRestyle(this, rgb)
    return false
}

// the color boxes
divcols = document.getElementById('colornames');
divcols.onmouseover = (_ => add_drag(".color"))

for (color of Plotly.d3.scale.category10().range()) {
    let div = document.createElement('div');
    div.style['background-color'] = color;
    div.draggable = true;
    div.ondragstart = colorDragStart
    div.ondragend = div.onmouseup = div.onmouseleave = remove_drag
    div.onmousedown = (_ => {add_drag(".color"); f = document.activeElement})
    div.onmouseup = (e => {if(f.classList.contains('color')) {
                       colorRestyle(f, e.target.style.backgroundColor); f.focus()}})
    divcols.append(div);
}

for (item of document.getElementsByClassName('color')) {
    item.onchange = (e => colorRestyle(e.target))
}


for (item of document.getElementsByClassName('dropcell')) {
    item.contentEditable = true
    item.ondragover = handleDragOver
    item.ondrop = handleDrop
}

for (item of document.querySelectorAll("[contenteditable],[contentEditable=true]")) {
    item.onkeydown = function(e) {if (e.key == "Enter") {try{this.onchange(e)} finally {return false}};}  // no newline for Enter press
    item.onkeyup = function(e) {if (this.innerText=="\n") {this.innerText = ""}}  // prevent newline when empyting with backspace or del
}

document.getElementById("cc").ondrop = colorDrop
document.getElementById("funcc").ondrop = colorDrop
document.getElementById("funcf").onkeyup = function(e){if(this.innerText=="\n"){this.innerText = ""}; this.onchange()}

for (var div of document.querySelectorAll("[tnum='1'] .dropcell")) {
    div.tabIndex = 0
    div.onfocus = (_ => {var t = _.target;
                       for (a of document.getElementsByClassName("coli")) {
                           a.onmouseover = (_ =>  {t.focus(); return false})
                           a.onclick = (e => {t.innerHTML = ''; t.append(colBox(e.target.id), document.createElement('br')); t.onchange(); t.focus()})}})
}


function handleDragStart(e) {
    add_drag("[tnum='1']")
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.id);
}

function handleDragOver(e) {
    e.preventDefault();   // needed otherwise drop is not called
    e.dataTransfer.dropEffect = 'move';
    return false;
}

function handleDrop(e) {
    e.stopPropagation(); // stops the browser from redirecting.
    if(e.dataTransfer.files.length){
        dsv(e.dataTransfer.files[0], init)
        return false;
    }
    
    id = e.dataTransfer.getData('text/html')
    src = document.getElementById(id)
    if (id.startsWith('colcol')) {
        // swap
        srcloc = src.parentNode
        this.prepend(src)
        this.children[1] && srcloc.prepend(this.children[1])  // case: empty dragging target
    }
    else {
        clone = colBox(id)
        this.append(clone, document.createElement('br'))
    }
    this.onchange()
    this.focus()
    return false
}

function colBox(k, colname=""){
    let div = document.createElement('div');
    div.innerHTML = colname || document.getElementById(k).innerHTML
    div.setAttribute('knum', colname ? k : document.getElementById(k).getAttribute('knum'))
    div.className = "coli"
    div.id = 'col' + k
    div.draggable = true
    div.setAttribute('contenteditable', "false")
    div.addEventListener('dragstart', handleDragStart)
    div.addEventListener('dragend', remove_drag)
    return div
}

function init_box(colpool){
    // list option
    colx = document.getElementById('colx_list');
    coly = document.getElementById('coly_list');
    colt = document.getElementById('colt_list');
    for (list of [colx, coly, colt]){
        list.innerHTML = '' // remove all currents options
        for (colname of colpool) {
            let option = document.createElement('option');
            option.value = colname;
            // option.id = colname;   // for dict-like access and to check is id in present
            list.appendChild(option);
        }
    }

    c1  = document.getElementById('colpool');
    //c1.addEventListener('mouseover', (_ => {add_drag("trace edit")}) );
    //c1.addEventListener('mouseleave', (_ => {remove_drag("trace edit")}) );
    c1.innerHTML = '' // remove all currents options
    // put all columns into dragable divs
    for (let [k, colname] of colpool.entries()) {
        let div = colBox(k+1, colname);
        c1.appendChild(div);
    }

    colx.addEventListener('dragover', handleDragOver);
    coly.addEventListener('drop', handleDrop);
}

function parseCell(cell) {
    cellHTML = cell.innerHTML.replace(/&nbsp;/g, "")
    cellText = cell.innerText.replace(/\u00A0/g, "")
    if (cellHTML == +cellHTML){
        // scalar, e.g. "5"
        return cellText }
    else if (cell.childElementCount && (cell.children[0].outerHTML == cellHTML)) {
        // single column
        return data[cellText]}
    else {
        // column operations
        expr_raw = cellHTML
        knums = new Set()
        for (child of cell.children) {
            knum = child.getAttribute('knum')
            if (knum==null)
                // normal string, e.g. "*8"
                expr_raw = expr_raw.replace(child.outerHTML, child.innerText)
            else {
                expr_raw = expr_raw.replace(child.outerHTML, "$"+knum)
                knums.add(knum)
            }
        }
        // search for column names starting with $ and ending as a word, e.g. $11 vs $119
        for (k in lookup) {if (k.startsWith('$')){  u=expr_raw.match("\\"+k+"\\b", "g"); u && knums.add(u[0].replace("$", ""))}}
        // Trim dollar sign and convert to integer
        //knums.add(...expr_raw.match(/\$[0-9]+/g).map(x=>+x.replace("$", "")))
        args = {}
        for (knum of knums)
            args["$"+knum] = data[knum].map(e => e=="undefined" || e===""? NaN : e)   // NaNs for Mathjs 
        console.log(cell.id, expr_raw, knums)
        expr2 = math.compile(expr_raw).evaluate;
        vector = expr2(args) 
        return vector
    }
}

function using_columns(){
    [cx, cy, ct] = document.getElementById("using").innerText.split(":")
    document.getElementById("cx").innerText = cx
    document.getElementById("cy").innerText = cy
    document.getElementById("ct").innerText = ct
    select_columns()
}

function select_columns(){
    args = {
        x : parseCell(document.getElementById("cx")),
        y : parseCell(document.getElementById("cy")),
        de_x : parseCell(document.getElementById("ce_x")),
        de_y : parseCell(document.getElementById("ce_y")),
        dt : parseCell(document.getElementById("ct")),
        ds : parseCell(document.getElementById("cs")),
        cc : document.getElementById("cc").innerText,
        co : document.getElementById("co").innerText,
    }
    args

    //document.getElementById("using").innerText = x + ":" + y + ":" + ct + ":" + ds
    plot_data(data, args)
    return true;
}

var fmtaxis = {
    linecolor: 'black', mirror: true,
    ticks: "inside", mirror: "allticks", zeroline: false
}

function linspace(start, stop, num, endpoint=true) {
    const div = endpoint ? (num - 1) : num;
    const step = (stop - start) / div;
    return Array.from({length: num}, (_, i) => start + step * i);
}

function empty_func(){
    // a placeholder (function with no data)
    var graph = document.getElementsByClassName("js-plotly-plot")[0];
    expr1 = document.getElementById("funcf").innerText
    if (expr1 == "") Plotly.restyle(graph, {'x':[[]], 'y':[[]]}, 1)
}

function draw_func(){
    var graph = document.getElementsByClassName("js-plotly-plot")[0];
    expr1 = document.getElementById("funcf").innerText
    funcc = document.getElementById("funcc").innerText
    funco = document.getElementById("funco").innerText
    if (expr1 != "") {
        try {
        /* expr = new Function("x", "return "+expr1); */
        // mathjs
        expr2 = math.compile(expr1).evaluate ;
        expr = x => expr2({'x':x})
        x1 = linspace(...graph._fullLayout.xaxis.range, 2000)
        if (graph._fullLayout.xaxis.type == 'log') x1 = x1.map(x => 10**x)
        y1 = x1.map(expr)
        }
        catch {
/*        if (typeof y1[0] == "Object") {*/
           document.getElementById("funcf").classList.add("invalid")
           return false;
        }
        document.getElementById("funcf").classList.remove("invalid")
        Plotly.restyle(graph, {'x':[x1], 'y':[y1], 'name': [expr1],
            marker: [{color: funcc}], opacity: funco}, 1)
    }
    for (x of document.querySelectorAll(".gtitle, .xtitle, .ytitle")){
        // reset attributes for the editable labels
        // needed only for the when page reload (work in first place) + mouse zoom (property removed)
        x.style['cursor'] = 'text'
        x.style['pointer-events'] = 'all'
        x.onclick = edittext
    }
}

function plot_data(data, {x, y, de_x, de_y, dt, ct, ds, cc, co}){
    console.log('asdfas', dt, x, y)

    trace1 = {
        type: "scattergl", // https://plotly.com/javascript/webgl-vs-svg/
        x: x,
        y: y,
        name: data._basename,
        mode: 'markers',
        marker: {
            opacity: co,
            color: cc ? cc : '#404040',
            line: { width: 1,
                color: '#404040'}}
    };
    if (dt) trace1.text = dt   //.map(ti => ""+ct+": "+ti)
    if (ds) trace1.marker.size = ds
    if (de_x) trace1.error_x = {array: de_x, color: cc ? cc : '#404040', opacity: co, width: 1}
    if (de_y) trace1.error_y = {array: de_y, color: cc ? cc : '#404040', opacity: co, width: 1}
    cx = document.getElementById("cx").innerText
    cy = document.getElementById("cy").innerText

    traces = [trace1];

    trace2 = {
        type: "line",
        x: [],
        y: [],
    };

    traces.push(trace2)

    layout = {
        autosize: true,
        // height: 394,
        // width: 1121,
        hovermode: 'closest',
        title: "csv plotter",
        xaxis: {
            title: (cx>-1 ? 'Column '+cx : cx),
            ...fmtaxis
        },
        yaxis: {
            //title: 'Column y',
            title: (cy>-1 ? 'Column '+cy : cy),
            ...fmtaxis
        },
        margin: {l: 50, r: 10, b: 40, t: 30}
    };
    // Plotly.plot('plotly-div', {
    Plotly.newPlot('plotly-div', {
        data: traces,
        layout: layout,
        config: {responsive: true,
            scrollZoom: true,
            displaylogo: false,
            modeBarButtonsToRemove: ['select2d', 'lasso2d']}
    });

    draw_func()
    zoompan()


    graph = document.getElementsByClassName("js-plotly-plot")[0];

    graph.on('plotly_click', function(data){
        var pts = '';
        for(var i=0; i < data.points.length; i++){
            pts = 'x = '+data.points[i].x +', y = '+
            data.points[i].y + ', ' + data.points[i].text;
        }
        document.getElementById("info").innerHTML = 'Closest point clicked: ' + pts;
    });

    graph.on('plotly_relayout', function(event){
        // recompute the function for new ranges after zoom (resize?)
        draw_func()
    });

}


gwidth = null
gheight = null
let observer = new MutationObserver(function(mutations) {
    var graph = document.getElementById("plotly-div")
    var resized = graph.style.width && graph.style.height && (gwidth != graph.style.width) || (gheight != graph.style.height)
    gwidth = graph.style.width
    gheight = graph.style.height
    if (resized) {
        window.dispatchEvent(new Event('resize'));
    }
});

observer.observe(document.getElementById('plotly-div'), {attributes: true})


// allow to pre-fill fields and url
url_kwargs = Object.fromEntries(new URL(window.location).searchParams)
url = url_kwargs["url"]


function init(){
    // after reading data:
    colpool = arguments[0]._colnames

    init_box(colpool)
    // render column names in plot fields
    lookup = {"$0": 0} 
    // lookup has both column names and column number
    // e.g. $4, "$colname" "colname" => 4 
    for ([i,k] of colpool.entries()) {lookup["$"+(i+1)] = lookup["$"+k] = lookup[k] = i+1}
    for (arg in url_kwargs) {
        t = document.getElementById(arg)
        t.innerText = ''
        val = url_kwargs[arg]
        id = lookup[val]
        if (id) t.append(String.fromCharCode(160), colBox("col"+id), document.createElement('br'))   // for editing firefox needs something before the Box; br is nice in first place, but wraps when more comes into the cell 
        else if (arg=='colc' || arg=='funcc') colorUpdate(t, val)
        else t.append(val)
    }

    select_columns()   // plots data
}

dsv(url, init)


// create shared link
document.getElementById("share").onclick = function(){
    _url = new URL(window.location)
    _url = _url.origin + _url.pathname + "?"
    _url += [...document.querySelectorAll(".drop,.dropcell")].map(x => {val=x.innerText; if (val) return x.id+'='+val}).filter(x=>x).join('&')
    _url = _url.replace(/#/g, '%23').replace(/\+/g, '%2B').replace(/\u00A0/g, "")
    var link = document.createElement("a")
    link.href = _url
    link.append(_url)
    document.getElementById('info').innerText = ''
    document.getElementById('info').append(link)
}


function edittext(svgtext){
    // to edit xtitle etc.
    //console.log(svgtext)
    svgtext = svgtext.target
    var input = document.createElement("input");
    input.value = svgtext.textContent
    graph.onmouseover = null   // remove temporarily the focus stealing from zoompan.js

    // input.onkeyup = function(e){
    input.addEventListener('keyup', function(e){
        //e.stopPropagation()
        if (["Enter", "Escape"].includes(e.key)) {this.blur();}
        else {svgtext.textContent = this.value};
        return false
    }, true)

    input.onblur = function(e){
        //if (e.relatedTarget){e.stopPropagation(); e.stopImmediatePropagation(); this.focus(); return}
        myforeign.remove()
        graph.onmouseover = graph.focus   // restore focus behaviour from zoompan.js
    }

    input.onchange = function (e) {
        // update the titles in plotly
        var val = e.target.parentNode.parentNode.classList.value
        var a = {"g-xtitle" : 'xaxis.', "g-ytitle" : 'yaxis.', "g-gtitle":''};
        a = a[val] + 'title'
        b = {}; b[a] = e.target.value
        Plotly.relayout(graph, b)
        graph.onmouseover = graph.focus   // restore focus behaviour from zoompan.js, relayout removes the foreign object
    }

    var myforeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject')
    myforeign.setAttribute("width", "100%");
    myforeign.setAttribute("height", "100%");
    myforeign.setAttribute("x", svgtext.attributes['x'].nodeValue);
    myforeign.setAttribute("y", math.max(svgtext.attributes['y'].nodeValue-35, 10));
    myforeign.append(input);

    svg = svgtext.parentNode
    svg.append(myforeign);
    console.log(svg.children, svgtext.textContent)

    input.focus()
}


</script>

<style>
    .plotypicon {
        width: 18px;
        height: 18px;
        border: 1px solid grey;
    }
</style>

<div id="plottyp" bla='"https://github.com/plotly/plotly-icons/tree/master/src/svg https://plotly-icons.ineffable.digital/">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-scatter.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-error-bars.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-line.svg" class="plotypicon">
   <image src="https://raw.githubusercontent.com/plotly/plotly-icons/master/src/svg/plot-histogram.svg" class="plotypicon"'>
</div>


</html>
